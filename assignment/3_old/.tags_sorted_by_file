!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
CHUNK_SIZE_FRONTIER	bfs/bfs.cpp	/^#define CHUNK_SIZE_FRONTIER /;"	d	file:
CHUNK_SIZE_INIT	bfs/bfs.cpp	/^#define CHUNK_SIZE_INIT /;"	d	file:
CHUNK_SIZE_UNVISITED	bfs/bfs.cpp	/^#define CHUNK_SIZE_UNVISITED /;"	d	file:
NOT_VISITED_MARKER	bfs/bfs.cpp	/^#define NOT_VISITED_MARKER /;"	d	file:
ROOT_NODE_ID	bfs/bfs.cpp	/^#define ROOT_NODE_ID /;"	d	file:
THREASHOLD	bfs/bfs.cpp	/^#define THREASHOLD /;"	d	file:
bfs_bottom_up	bfs/bfs.cpp	/^void bfs_bottom_up(Graph graph, solution* sol) {$/;"	f
bfs_bottom_up_step	bfs/bfs.cpp	/^void bfs_bottom_up_step(Graph g, int* distances, int* new_distances,$/;"	f
bfs_hybrid	bfs/bfs.cpp	/^void bfs_hybrid(Graph graph, solution* sol) {$/;"	f
bfs_hybrid_step	bfs/bfs.cpp	/^void bfs_hybrid_step(Graph g,$/;"	f
bfs_top_down	bfs/bfs.cpp	/^void bfs_top_down(Graph graph, solution* sol) {$/;"	f
top_down_step	bfs/bfs.cpp	/^void top_down_step($/;"	f
vertex_set_clear	bfs/bfs.cpp	/^void vertex_set_clear(vertex_set* list) {$/;"	f
vertex_set_init	bfs/bfs.cpp	/^void vertex_set_init(vertex_set* list, int count) {$/;"	f
__BFS_H__	bfs/bfs.h	/^#define __BFS_H__$/;"	d
count	bfs/bfs.h	/^    int count;$/;"	m	struct:vertex_set
distances	bfs/bfs.h	/^    int *distances;$/;"	m	struct:solution
max_vertices	bfs/bfs.h	/^    int max_vertices;$/;"	m	struct:vertex_set
solution	bfs/bfs.h	/^struct solution {$/;"	s
vertex_set	bfs/bfs.h	/^struct vertex_set {$/;"	s
vertices	bfs/bfs.h	/^    int *vertices;$/;"	m	struct:vertex_set
USE_BINARY_GRAPH	bfs/grade.cpp	/^#define USE_BINARY_GRAPH /;"	d	file:
bott_up	bfs/grade.cpp	/^#define bott_up /;"	d	file:
compute_score	bfs/grade.cpp	/^double compute_score(std::string graph_name, bool correct, double ref_time, double stu_time) {$/;"	f
hybrid	bfs/grade.cpp	/^#define hybrid /;"	d	file:
load_graph	bfs/grade.cpp	/^graph* load_graph(std::string graph_filename) {$/;"	f
main	bfs/grade.cpp	/^int main(int argc, char** argv) {$/;"	f
print_scores	bfs/grade.cpp	/^void print_scores(std::vector<std::string> grade_graphs, std::vector<std::vector<double>> scores) {$/;"	f
print_separator_line	bfs/grade.cpp	/^void print_separator_line() {$/;"	f
run_on_graph	bfs/grade.cpp	/^void run_on_graph(int idx, graph* g, int num_threads, int num_runs, $/;"	f
top_down	bfs/grade.cpp	/^#define top_down /;"	d	file:
usage	bfs/grade.cpp	/^void usage(const char* binary_name) {$/;"	f
USE_BINARY_GRAPH	bfs/main.cpp	/^#define USE_BINARY_GRAPH /;"	d	file:
main	bfs/main.cpp	/^int main(int argc, char** argv) {$/;"	f
CycleTimer	common/CycleTimer.h	/^  class CycleTimer {$/;"	c
SysClock	common/CycleTimer.h	/^    typedef unsigned long long SysClock;$/;"	t	class:CycleTimer
_SYRAH_CYCLE_TIMER_H_	common/CycleTimer.h	/^#define _SYRAH_CYCLE_TIMER_H_$/;"	d
currentSeconds	common/CycleTimer.h	/^    static double currentSeconds() {$/;"	f	class:CycleTimer
currentTicks	common/CycleTimer.h	/^    static SysClock currentTicks() {$/;"	f	class:CycleTimer
msPerTick	common/CycleTimer.h	/^    static double msPerTick() {$/;"	f	class:CycleTimer
secondsPerTick	common/CycleTimer.h	/^    static double secondsPerTick() {$/;"	f	class:CycleTimer
tickUnits	common/CycleTimer.h	/^    static const char* tickUnits() {$/;"	f	class:CycleTimer
ticksPerSecond	common/CycleTimer.h	/^    static double ticksPerSecond() {$/;"	f	class:CycleTimer
ASSERT	common/contracts.h	/^#define ASSERT(/;"	d
ASSERT	common/contracts.h	/^#undef ASSERT$/;"	d
ENSURES	common/contracts.h	/^#define ENSURES(/;"	d
ENSURES	common/contracts.h	/^#undef ENSURES$/;"	d
REQUIRES	common/contracts.h	/^#define REQUIRES(/;"	d
REQUIRES	common/contracts.h	/^#undef REQUIRES$/;"	d
COL_SIZE	common/grade.h	/^#define COL_SIZE /;"	d
EPSILON	common/grade.h	/^#define EPSILON /;"	d
POINTS_INCORRECT	common/grade.h	/^#define POINTS_INCORRECT /;"	d
POINTS_NA	common/grade.h	/^#define POINTS_NA /;"	d
__GRADE_H__	common/grade.h	/^#define __GRADE_H__$/;"	d
compareApprox	common/grade.h	/^bool compareApprox(Graph graph, T* ref, T* stu)$/;"	f
compareArrays	common/grade.h	/^bool compareArrays(Graph graph, T* ref, T* stu)$/;"	f
compareArraysAndDisplay	common/grade.h	/^bool compareArraysAndDisplay(Graph graph, T* ref, T*stu) $/;"	f
compareArraysAndRadiiEst	common/grade.h	/^bool compareArraysAndRadiiEst(Graph graph, T* ref, T* stu) $/;"	f
printTimingApp	common/grade.h	/^static void printTimingApp(std::ostream& timing, const char* appName)$/;"	f
sep	common/grade.h	/^static void sep(std::ostream& out, char separator = '-', int length = 78)$/;"	f
GRAPH_HEADER_TOKEN	common/graph.cpp	/^#define GRAPH_HEADER_TOKEN /;"	d	file:
build_edges	common/graph.cpp	/^void build_edges(graph* graph, int* scratch)$/;"	f
build_incoming_edges	common/graph.cpp	/^void build_incoming_edges(graph* graph) {$/;"	f
build_start	common/graph.cpp	/^void build_start(graph* graph, int* scratch)$/;"	f
free_graph	common/graph.cpp	/^void free_graph(Graph graph)$/;"	f
get_meta_data	common/graph.cpp	/^void get_meta_data(std::ifstream& file, graph* graph)$/;"	f
load_graph	common/graph.cpp	/^Graph load_graph(const char* filename)$/;"	f
load_graph_binary	common/graph.cpp	/^Graph load_graph_binary(const char* filename)$/;"	f
print_graph	common/graph.cpp	/^void print_graph(const graph* graph)$/;"	f
read_graph_file	common/graph.cpp	/^void read_graph_file(std::ifstream& file, int* scratch)$/;"	f
store_graph_binary	common/graph.cpp	/^void store_graph_binary(const char* filename, Graph graph) {$/;"	f
__GRAPH_H__	common/graph.h	/^#define __GRAPH_H__$/;"	d
graph	common/graph.h	/^struct graph$/;"	s
incoming_edges	common/graph.h	/^    Vertex* incoming_edges;$/;"	m	struct:graph
incoming_starts	common/graph.h	/^    int* incoming_starts;$/;"	m	struct:graph
num_edges	common/graph.h	/^    int num_edges;$/;"	m	struct:graph
num_nodes	common/graph.h	/^    int num_nodes;$/;"	m	struct:graph
outgoing_edges	common/graph.h	/^    Vertex* outgoing_edges;$/;"	m	struct:graph
outgoing_starts	common/graph.h	/^    int* outgoing_starts;$/;"	m	struct:graph
__GRAPH_INTERNAL_H__	common/graph_internal.h	/^#define __GRAPH_INTERNAL_H__$/;"	d
incoming_begin	common/graph_internal.h	/^static inline const Vertex* incoming_begin(const Graph g, Vertex v)$/;"	f
incoming_end	common/graph_internal.h	/^static inline const Vertex* incoming_end(const Graph g, Vertex v)$/;"	f
incoming_size	common/graph_internal.h	/^static inline int incoming_size(const Graph g, Vertex v)$/;"	f
num_edges	common/graph_internal.h	/^static inline int num_edges(const Graph graph)$/;"	f
num_nodes	common/graph_internal.h	/^static inline int num_nodes(const Graph graph)$/;"	f
outgoing_begin	common/graph_internal.h	/^static inline const Vertex* outgoing_begin(const Graph g, Vertex v)$/;"	f
outgoing_end	common/graph_internal.h	/^static inline const Vertex* outgoing_end(const Graph g, Vertex v)$/;"	f
outgoing_size	common/graph_internal.h	/^static inline int outgoing_size(const Graph g, Vertex v)$/;"	f
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
main	learning_omp/hello_world.c	/^int main() {$/;"	f
PageRankConvergence	pagerank/grade.cpp	/^#define PageRankConvergence /;"	d	file:
PageRankDampening	pagerank/grade.cpp	/^#define PageRankDampening /;"	d	file:
USE_BINARY_GRAPH	pagerank/grade.cpp	/^#define USE_BINARY_GRAPH /;"	d	file:
load_graph	pagerank/grade.cpp	/^graph* load_graph(std::string graph_filename) {$/;"	f
main	pagerank/grade.cpp	/^int main(int argc, char** argv) {$/;"	f
print_scores	pagerank/grade.cpp	/^void print_scores(std::vector<std::string> grade_graphs, std::vector<double> scores) {$/;"	f
print_separator_line	pagerank/grade.cpp	/^void print_separator_line() {$/;"	f
run_on_graph	pagerank/grade.cpp	/^double run_on_graph(graph* g, int num_threads, int num_runs, std::string graph_name) {$/;"	f
usage	pagerank/grade.cpp	/^void usage(const char* binary_name) {$/;"	f
PageRankConvergence	pagerank/main.cpp	/^#define PageRankConvergence /;"	d	file:
PageRankDampening	pagerank/main.cpp	/^#define PageRankDampening /;"	d	file:
USE_BINARY_GRAPH	pagerank/main.cpp	/^#define USE_BINARY_GRAPH /;"	d	file:
main	pagerank/main.cpp	/^int main(int argc, char** argv) {$/;"	f
ABS	pagerank/page_rank.cpp	/^#define ABS(/;"	d	file:
pageRank	pagerank/page_rank.cpp	/^void pageRank(Graph g, double* solution, double damping, double convergence) {$/;"	f
__PAGE_RANK_H__	pagerank/page_rank.h	/^#define __PAGE_RANK_H__$/;"	d
cc	part2/bfs/Makefile	/^	mpicc -cc=icc -O3 -std=c++11 -fopenmp -Wall -g -I..\/include\/ -o bfs_dist bfs.cpp main.cpp graph_dist_ref_intel.o bfs_ref_intel.o$/;"	m
CHUNK_SIZE_FRONTIER	part2/bfs/bfs.cpp	/^#define CHUNK_SIZE_FRONTIER /;"	d	file:
GET_INDEX	part2/bfs/bfs.cpp	/^#define GET_INDEX(/;"	d	file:
bfs	part2/bfs/bfs.cpp	/^void bfs(DistGraph &g, int *depths) {$/;"	f
bfs_step	part2/bfs/bfs.cpp	/^void bfs_step(DistGraph &g, int *depths,$/;"	f
contains	part2/bfs/bfs.cpp	/^#define contains(/;"	d	file:
global_frontier_sync	part2/bfs/bfs.cpp	/^void global_frontier_sync(DistGraph &g, DistFrontier &frontier, int *depths) {$/;"	f
NOT_VISITED_MARKER	part2/bfs/bfs.h	/^#define NOT_VISITED_MARKER /;"	d
ROOT_NODE_ID	part2/bfs/bfs.h	/^#define ROOT_NODE_ID /;"	d
DistFrontier	part2/bfs/frontier_dist.h	/^DistFrontier::DistFrontier(int _max_vertices_per_node, int _world_size,$/;"	f	class:DistFrontier
DistFrontier	part2/bfs/frontier_dist.h	/^class DistFrontier {$/;"	c
add	part2/bfs/frontier_dist.h	/^void DistFrontier::add(int owner_rank, Vertex v, int depth) {$/;"	f	class:DistFrontier
clear	part2/bfs/frontier_dist.h	/^void DistFrontier::clear() {$/;"	f	class:DistFrontier
depths	part2/bfs/frontier_dist.h	/^    int **depths;$/;"	m	class:DistFrontier
elements	part2/bfs/frontier_dist.h	/^    Vertex **elements;$/;"	m	class:DistFrontier
get_local_frontier	part2/bfs/frontier_dist.h	/^Vertex* DistFrontier::get_local_frontier() {$/;"	f	class:DistFrontier
get_local_frontier_size	part2/bfs/frontier_dist.h	/^int DistFrontier::get_local_frontier_size() {$/;"	f	class:DistFrontier
get_local_frontier_size_ptr	part2/bfs/frontier_dist.h	/^int *DistFrontier::get_local_frontier_size_ptr() {$/;"	f	class:DistFrontier
get_remote_frontier	part2/bfs/frontier_dist.h	/^int *DistFrontier::get_remote_frontier(int world_rank) {$/;"	f	class:DistFrontier
get_remote_frontier_size	part2/bfs/frontier_dist.h	/^int DistFrontier::get_remote_frontier_size(int world_rank) {$/;"	f	class:DistFrontier
is_empty	part2/bfs/frontier_dist.h	/^bool DistFrontier::is_empty() {$/;"	f	class:DistFrontier
max_vertices_per_node	part2/bfs/frontier_dist.h	/^    int max_vertices_per_node;$/;"	m	class:DistFrontier
sizes	part2/bfs/frontier_dist.h	/^    int *sizes;$/;"	m	class:DistFrontier
world_rank	part2/bfs/frontier_dist.h	/^    int world_rank;$/;"	m	class:DistFrontier
world_size	part2/bfs/frontier_dist.h	/^    int world_size;$/;"	m	class:DistFrontier
~DistFrontier	part2/bfs/frontier_dist.h	/^DistFrontier::~DistFrontier() {$/;"	f	class:DistFrontier
DistFrontierRef	part2/bfs/frontier_dist_ref.h	/^class DistFrontierRef {$/;"	c
depths	part2/bfs/frontier_dist_ref.h	/^    int **depths;$/;"	m	class:DistFrontierRef
elements	part2/bfs/frontier_dist_ref.h	/^    Vertex **elements;$/;"	m	class:DistFrontierRef
max_vertices_per_node	part2/bfs/frontier_dist_ref.h	/^    int max_vertices_per_node;$/;"	m	class:DistFrontierRef
sizes	part2/bfs/frontier_dist_ref.h	/^    int *sizes;$/;"	m	class:DistFrontierRef
world_rank	part2/bfs/frontier_dist_ref.h	/^    int world_rank;$/;"	m	class:DistFrontierRef
world_size	part2/bfs/frontier_dist_ref.h	/^    int world_size;$/;"	m	class:DistFrontierRef
MASTER	part2/bfs/main.cpp	/^#define MASTER /;"	d	file:
NUM_RUNS	part2/bfs/main.cpp	/^#define NUM_RUNS /;"	d	file:
SILENT	part2/bfs/main.cpp	/^#define SILENT /;"	d	file:
is_same	part2/bfs/main.cpp	/^int is_same(int *a, int *b, int size) {$/;"	f
main	part2/bfs/main.cpp	/^int main(int argc, char** argv) {$/;"	f
print_usage	part2/bfs/main.cpp	/^void print_usage() {$/;"	f
DistGraph	part2/include/graph_dist.h	/^DistGraph::DistGraph(int _vertices_per_process, int _max_edges_per_vertex,$/;"	f	class:DistGraph
DistGraph	part2/include/graph_dist.h	/^class DistGraph {$/;"	c
__DISTGRAPH_DEFINED	part2/include/graph_dist.h	/^#define __DISTGRAPH_DEFINED$/;"	d
end_vertex	part2/include/graph_dist.h	/^    Vertex end_vertex;$/;"	m	class:DistGraph
generate_graph_clustered	part2/include/graph_dist.h	/^void DistGraph::generate_graph_clustered() {$/;"	f	class:DistGraph
generate_graph_grid	part2/include/graph_dist.h	/^void DistGraph::generate_graph_grid() {$/;"	f	class:DistGraph
generate_graph_uniform	part2/include/graph_dist.h	/^void DistGraph::generate_graph_uniform() {$/;"	f	class:DistGraph
get_incoming_edges	part2/include/graph_dist.h	/^void DistGraph::get_incoming_edges(const std::vector<std::vector<Edge>> &edge_scatter) {$/;"	f	class:DistGraph
get_index	part2/include/graph_dist.h	/^int DistGraph::get_index(int v) {$/;"	f	class:DistGraph
get_vertex_edges_size	part2/include/graph_dist.h	/^int DistGraph::get_vertex_edges_size(int v, int mode) {$/;"	f	class:DistGraph
get_vertex_owner_rank	part2/include/graph_dist.h	/^int DistGraph::get_vertex_owner_rank(Vertex v) {$/;"	f	class:DistGraph
in_edge_dst	part2/include/graph_dist.h	/^    int **in_edge_dst;$/;"	m	class:DistGraph
in_edge_src_size	part2/include/graph_dist.h	/^    int *in_edge_src_size;$/;"	m	class:DistGraph
in_edges	part2/include/graph_dist.h	/^    std::vector<Edge> in_edges;$/;"	m	class:DistGraph
is_bottom_edge_vertex	part2/include/graph_dist.h	/^bool DistGraph::is_bottom_edge_vertex(Vertex v, int sqrt_world_size, int sqrt_per_process) {$/;"	f	class:DistGraph
is_left_edge_vertex	part2/include/graph_dist.h	/^bool DistGraph::is_left_edge_vertex(Vertex v, int sqrt_world_size, int sqrt_per_process) {$/;"	f	class:DistGraph
is_right_edge_vertex	part2/include/graph_dist.h	/^bool DistGraph::is_right_edge_vertex(Vertex v, int sqrt_world_size, int sqrt_per_process) {$/;"	f	class:DistGraph
is_top_edge_vertex	part2/include/graph_dist.h	/^bool DistGraph::is_top_edge_vertex(Vertex v, int sqrt_world_size, int sqrt_per_process) {$/;"	f	class:DistGraph
max_edges_per_vertex	part2/include/graph_dist.h	/^    int max_edges_per_vertex;$/;"	m	class:DistGraph
out_edge_dst	part2/include/graph_dist.h	/^    int **out_edge_dst;$/;"	m	class:DistGraph
out_edge_dst_size	part2/include/graph_dist.h	/^    int *out_edge_dst_size;$/;"	m	class:DistGraph
out_edges	part2/include/graph_dist.h	/^    std::vector<Edge> out_edges;$/;"	m	class:DistGraph
set_edges	part2/include/graph_dist.h	/^void DistGraph::set_edges(int *out_edge_dst_array, int len, int mode) {$/;"	f	class:DistGraph
setup	part2/include/graph_dist.h	/^void DistGraph::setup() {$/;"	f	class:DistGraph
start_vertex	part2/include/graph_dist.h	/^    Vertex start_vertex;$/;"	m	class:DistGraph
total_vertices	part2/include/graph_dist.h	/^int DistGraph::total_vertices() {$/;"	f	class:DistGraph
vertices_per_process	part2/include/graph_dist.h	/^    int vertices_per_process;   \/\/ vertices per cluster node$/;"	m	class:DistGraph
world_rank	part2/include/graph_dist.h	/^    int world_rank;$/;"	m	class:DistGraph
world_size	part2/include/graph_dist.h	/^    int world_size;$/;"	m	class:DistGraph
CLUSTERING_RATIO	part2/include/graph_dist_ref.h	/^#define CLUSTERING_RATIO /;"	d
DistGraphRef	part2/include/graph_dist_ref.h	/^class DistGraphRef {$/;"	c
Edge	part2/include/graph_dist_ref.h	/^struct Edge {$/;"	s
GraphType	part2/include/graph_dist_ref.h	/^enum GraphType { uniform_random, rmat, grid, clustered };$/;"	g
__DISTGRAPHREF_DEFINED	part2/include/graph_dist_ref.h	/^#define __DISTGRAPHREF_DEFINED$/;"	d
clustered	part2/include/graph_dist_ref.h	/^enum GraphType { uniform_random, rmat, grid, clustered };$/;"	e	enum:GraphType
dest	part2/include/graph_dist_ref.h	/^    Vertex dest;$/;"	m	struct:Edge
end_vertex	part2/include/graph_dist_ref.h	/^    Vertex end_vertex;$/;"	m	class:DistGraphRef
grid	part2/include/graph_dist_ref.h	/^enum GraphType { uniform_random, rmat, grid, clustered };$/;"	e	enum:GraphType
in_edges	part2/include/graph_dist_ref.h	/^    std::vector<Edge> in_edges;$/;"	m	class:DistGraphRef
incoming_edges	part2/include/graph_dist_ref.h	/^    std::vector<std::vector<Vertex>> incoming_edges;$/;"	m	class:DistGraphRef
max_edges_per_vertex	part2/include/graph_dist_ref.h	/^    int max_edges_per_vertex;$/;"	m	class:DistGraphRef
out_edges	part2/include/graph_dist_ref.h	/^    std::vector<Edge> out_edges;$/;"	m	class:DistGraphRef
outgoing_edges	part2/include/graph_dist_ref.h	/^    std::vector<std::vector<Vertex>> outgoing_edges;$/;"	m	class:DistGraphRef
rmat	part2/include/graph_dist_ref.h	/^enum GraphType { uniform_random, rmat, grid, clustered };$/;"	e	enum:GraphType
src	part2/include/graph_dist_ref.h	/^    Vertex src;$/;"	m	struct:Edge
start_vertex	part2/include/graph_dist_ref.h	/^    Vertex start_vertex;$/;"	m	class:DistGraphRef
type	part2/include/graph_dist_ref.h	/^    GraphType type;$/;"	m	class:DistGraphRef
uniform_random	part2/include/graph_dist_ref.h	/^enum GraphType { uniform_random, rmat, grid, clustered };$/;"	e	enum:GraphType
vertices_per_process	part2/include/graph_dist_ref.h	/^    int vertices_per_process;$/;"	m	class:DistGraphRef
world_rank	part2/include/graph_dist_ref.h	/^    int world_rank;$/;"	m	class:DistGraphRef
world_size	part2/include/graph_dist_ref.h	/^    int world_size;$/;"	m	class:DistGraphRef
cc	part2/pagerank/Makefile	/^	mpicc -cc=icc -O3 -std=c++11 -fopenmp -Wall -g -I..\/include\/ -o pr_dist page_rank.cpp main.cpp intel_page_rank_ref.o graph_dist_ref_intel.o$/;"	m
EPSILON	part2/pagerank/main.cpp	/^#define EPSILON /;"	d	file:
MASTER	part2/pagerank/main.cpp	/^#define MASTER /;"	d	file:
NUM_RUNS	part2/pagerank/main.cpp	/^#define NUM_RUNS /;"	d	file:
PageRankConvergence	part2/pagerank/main.cpp	/^#define PageRankConvergence /;"	d	file:
PageRankDampening	part2/pagerank/main.cpp	/^#define PageRankDampening /;"	d	file:
SILENT	part2/pagerank/main.cpp	/^#define SILENT /;"	d	file:
compareApprox	part2/pagerank/main.cpp	/^int compareApprox(double* ref, double* stu, int length)$/;"	f
main	part2/pagerank/main.cpp	/^int main(int argc, char** argv) {$/;"	f
print_usage	part2/pagerank/main.cpp	/^void print_usage() {$/;"	f
pageRank	part2/pagerank/page_rank.cpp	/^void pageRank(DistGraph &g, double* solution, double damping, double convergence) {$/;"	f
__PAGE_RANK_H__	part2/pagerank/page_rank.h	/^#define __PAGE_RANK_H__$/;"	d
BINARYNAME	tools/Makefile	/^BINARYNAME=graphTools$/;"	m
CMD_EDGESTATS	tools/graphTools.cpp	/^#define CMD_EDGESTATS /;"	d	file:
CMD_INFO	tools/graphTools.cpp	/^#define CMD_INFO /;"	d	file:
CMD_NOINEDGES	tools/graphTools.cpp	/^#define CMD_NOINEDGES /;"	d	file:
CMD_NOOUTEDGES	tools/graphTools.cpp	/^#define CMD_NOOUTEDGES /;"	d	file:
CMD_PRINT	tools/graphTools.cpp	/^#define CMD_PRINT /;"	d	file:
CMD_TEXT2BIN	tools/graphTools.cpp	/^#define CMD_TEXT2BIN /;"	d	file:
main	tools/graphTools.cpp	/^int main(int argc, char** argv) {$/;"	f
print_help	tools/graphTools.cpp	/^void print_help(const char* binary_name) {$/;"	f
