!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
ARCH	Makefile	/^ARCH=$(shell uname | sed -e 's\/-.*\/\/g')$/;"	m
CC_FILES	Makefile	/^CC_FILES   := main.cpp display.cpp benchmark.cpp refRenderer.cpp \\$/;"	m
CU_DEPS	Makefile	/^CU_DEPS    :=$/;"	m
CU_FILES	Makefile	/^CU_FILES   := cudaRenderer.cu$/;"	m
CXX	Makefile	/^CXX=g++ -m64$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-O3 -Wall -g$/;"	m
EXECUTABLE	Makefile	/^EXECUTABLE := render$/;"	m
FRAMEWORKS	Makefile	/^FRAMEWORKS :=$/;"	m
HOSTNAME	Makefile	/^HOSTNAME=$(shell hostname)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=-L\/opt\/cuda-8.0\/lib64\/ -lcudart$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=-L\/usr\/local\/cuda\/lib64\/ -lcudart$/;"	m
LDFRAMEWORKS	Makefile	/^LDFRAMEWORKS := $(addprefix -framework , $(FRAMEWORKS))$/;"	m
LDLIBS	Makefile	/^LDLIBS  := $(addprefix -l, $(LIBS))$/;"	m
LIBS	Makefile	/^LIBS       :=$/;"	m
LOGS	Makefile	/^LOGS	   := logs$/;"	m
NVCC	Makefile	/^NVCC=nvcc$/;"	m
NVCCFLAGS	Makefile	/^NVCCFLAGS=-O3 -m64 --gpu-architecture compute_35$/;"	m
OBJDIR	Makefile	/^OBJDIR=objs$/;"	m
OBJS	Makefile	/^OBJS=$(OBJDIR)\/main.o $(OBJDIR)\/display.o $(OBJDIR)\/benchmark.o $(OBJDIR)\/refRenderer.o \\$/;"	m
CheckBenchmark	benchmark.cpp	/^CheckBenchmark($/;"	f
compare_images	benchmark.cpp	/^static void compare_images(const Image* ref_image, const Image* cuda_image) {$/;"	f	file:
startBenchmark	benchmark.cpp	/^startBenchmark($/;"	f
BIG_LITTLE	circleRenderer.h	/^    BIG_LITTLE,$/;"	e	enum:__anon1
BOUNCING_BALLS	circleRenderer.h	/^    BOUNCING_BALLS, $/;"	e	enum:__anon1
CIRCLE_RGB	circleRenderer.h	/^    CIRCLE_RGB,$/;"	e	enum:__anon1
CIRCLE_RGBY	circleRenderer.h	/^    CIRCLE_RGBY,$/;"	e	enum:__anon1
CIRCLE_TEST_100K	circleRenderer.h	/^    CIRCLE_TEST_100K,$/;"	e	enum:__anon1
CIRCLE_TEST_10K	circleRenderer.h	/^    CIRCLE_TEST_10K,$/;"	e	enum:__anon1
CircleRenderer	circleRenderer.h	/^class CircleRenderer {$/;"	c
FIREWORKS	circleRenderer.h	/^    FIREWORKS, $/;"	e	enum:__anon1
HYPNOSIS	circleRenderer.h	/^    HYPNOSIS, $/;"	e	enum:__anon1
LITTLE_BIG	circleRenderer.h	/^    LITTLE_BIG$/;"	e	enum:__anon1
NUM_FIREWORKS	circleRenderer.h	/^#define NUM_FIREWORKS /;"	d
NUM_SPARKS	circleRenderer.h	/^#define NUM_SPARKS /;"	d
PATTERN	circleRenderer.h	/^    PATTERN,$/;"	e	enum:__anon1
SNOWFLAKES	circleRenderer.h	/^    SNOWFLAKES,$/;"	e	enum:__anon1
SNOWFLAKES_SINGLE_FRAME	circleRenderer.h	/^    SNOWFLAKES_SINGLE_FRAME,$/;"	e	enum:__anon1
SceneName	circleRenderer.h	/^} SceneName;$/;"	t	typeref:enum:__anon1
__CIRCLE_RENDERER_H__	circleRenderer.h	/^#define __CIRCLE_RENDERER_H__$/;"	d
~CircleRenderer	circleRenderer.h	/^    virtual ~CircleRenderer() { };$/;"	f	class:CircleRenderer
CudaRenderer	cudaRenderer.h	/^class CudaRenderer : public CircleRenderer {$/;"	c
__CUDA_RENDERER_H__	cudaRenderer.h	/^#define __CUDA_RENDERER_H__$/;"	d
color	cudaRenderer.h	/^    float* color;$/;"	m	class:CudaRenderer
cudaDeviceColor	cudaRenderer.h	/^    float* cudaDeviceColor;$/;"	m	class:CudaRenderer
cudaDeviceImageData	cudaRenderer.h	/^    float* cudaDeviceImageData;$/;"	m	class:CudaRenderer
cudaDevicePosition	cudaRenderer.h	/^    float* cudaDevicePosition;$/;"	m	class:CudaRenderer
cudaDeviceRadius	cudaRenderer.h	/^    float* cudaDeviceRadius;$/;"	m	class:CudaRenderer
cudaDeviceVelocity	cudaRenderer.h	/^    float* cudaDeviceVelocity;$/;"	m	class:CudaRenderer
image	cudaRenderer.h	/^    Image* image;$/;"	m	class:CudaRenderer
numCircles	cudaRenderer.h	/^    int numCircles;$/;"	m	class:CudaRenderer
position	cudaRenderer.h	/^    float* position;$/;"	m	class:CudaRenderer
radius	cudaRenderer.h	/^    float* radius;$/;"	m	class:CudaRenderer
sceneName	cudaRenderer.h	/^    SceneName sceneName;$/;"	m	class:CudaRenderer
uint	cudaRenderer.h	/^#define uint /;"	d
velocity	cudaRenderer.h	/^    float* velocity;$/;"	m	class:CudaRenderer
CycleTimer	cycleTimer.h	/^  class CycleTimer {$/;"	c
SysClock	cycleTimer.h	/^    typedef unsigned long long SysClock;$/;"	t	class:CycleTimer
_SYRAH_CYCLE_TIMER_H_	cycleTimer.h	/^#define _SYRAH_CYCLE_TIMER_H_$/;"	d
currentSeconds	cycleTimer.h	/^    static double currentSeconds() {$/;"	f	class:CycleTimer
currentTicks	cycleTimer.h	/^    static SysClock currentTicks() {$/;"	f	class:CycleTimer
msPerTick	cycleTimer.h	/^    static double msPerTick() {$/;"	f	class:CycleTimer
secondsPerTick	cycleTimer.h	/^    static double secondsPerTick() {$/;"	f	class:CycleTimer
tickUnits	cycleTimer.h	/^    static const char* tickUnits() {$/;"	f	class:CycleTimer
ticksPerSecond	cycleTimer.h	/^    static double ticksPerSecond() {$/;"	f	class:CycleTimer
gDisplay	display.cpp	/^} gDisplay;$/;"	v	typeref:struct:__anon2	file:
handleDisplay	display.cpp	/^handleDisplay() {$/;"	f
handleKeyPress	display.cpp	/^handleKeyPress(unsigned char key, int x, int y) {$/;"	f
handleReshape	display.cpp	/^handleReshape(int w, int h) {$/;"	f
height	display.cpp	/^    int height;$/;"	m	struct:__anon2	file:
lastFrameTime	display.cpp	/^    double lastFrameTime;$/;"	m	struct:__anon2	file:
pauseSim	display.cpp	/^    bool pauseSim;$/;"	m	struct:__anon2	file:
printStats	display.cpp	/^    bool printStats;$/;"	m	struct:__anon2	file:
renderPicture	display.cpp	/^renderPicture() {$/;"	f
renderer	display.cpp	/^    CircleRenderer* renderer;$/;"	m	struct:__anon2	file:
startRendererWithDisplay	display.cpp	/^startRendererWithDisplay(CircleRenderer* renderer) {$/;"	f
updateSim	display.cpp	/^    bool updateSim;$/;"	m	struct:__anon2	file:
width	display.cpp	/^    int width;$/;"	m	struct:__anon2	file:
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
Image	image.h	/^    Image(int w, int h) {$/;"	f	struct:Image
Image	image.h	/^struct Image {$/;"	s
__IMAGE_H__	image.h	/^#define  __IMAGE_H__$/;"	d
clear	image.h	/^    void clear(float r, float g, float b, float a) {$/;"	f	struct:Image
data	image.h	/^    float* data;$/;"	m	struct:Image
height	image.h	/^    int height;$/;"	m	struct:Image
width	image.h	/^    int width;$/;"	m	struct:Image
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
usage	main.cpp	/^void usage(const char* progname) {$/;"	f
Noise1DValueTable	noise.cpp	/^static float Noise1DValueTable[] = {$/;"	v	file:
NoiseXPermutationTable	noise.cpp	/^static int NoiseXPermutationTable[] = {$/;"	v	file:
NoiseYPermutationTable	noise.cpp	/^static int NoiseYPermutationTable[] = {$/;"	v	file:
getNoiseTables	noise.cpp	/^getNoiseTables(int** permX, int** permY, float** value1D) {$/;"	f
vec2CellNoise	noise.cpp	/^vec2CellNoise(float location[3], float result[2], int index)$/;"	f
__NOISE_H__	noise.h	/^#define __NOISE_H__$/;"	d
__PLATFORM_GL_H__	platformgl.h	/^#define __PLATFORM_GL_H__$/;"	d
writePPMImage	ppm.cpp	/^writePPMImage(const Image* image, const char *filename)$/;"	f
__PPM_H__	ppm.h	/^#define __PPM_H__$/;"	d
RefRenderer	refRenderer.cpp	/^RefRenderer::RefRenderer() {$/;"	f	class:RefRenderer
advanceAnimation	refRenderer.cpp	/^RefRenderer::advanceAnimation() {$/;"	f	class:RefRenderer
allocOutputImage	refRenderer.cpp	/^RefRenderer::allocOutputImage(int width, int height) {$/;"	f	class:RefRenderer
clearImage	refRenderer.cpp	/^RefRenderer::clearImage() {$/;"	f	class:RefRenderer
dumpParticles	refRenderer.cpp	/^void RefRenderer::dumpParticles(const char* filename) {$/;"	f	class:RefRenderer
getImage	refRenderer.cpp	/^RefRenderer::getImage() {$/;"	f	class:RefRenderer
loadScene	refRenderer.cpp	/^RefRenderer::loadScene(SceneName scene) {$/;"	f	class:RefRenderer
lookupColor	refRenderer.cpp	/^lookupColor(float coord, float& r, float& g, float& b) {$/;"	f	file:
render	refRenderer.cpp	/^RefRenderer::render() {$/;"	f	class:RefRenderer
setup	refRenderer.cpp	/^RefRenderer::setup() {$/;"	f	class:RefRenderer
shadePixel	refRenderer.cpp	/^RefRenderer::shadePixel($/;"	f	class:RefRenderer
~RefRenderer	refRenderer.cpp	/^RefRenderer::~RefRenderer() {$/;"	f	class:RefRenderer
RefRenderer	refRenderer.h	/^class RefRenderer : public CircleRenderer {$/;"	c
__REF_RENDERER_H__	refRenderer.h	/^#define __REF_RENDERER_H__$/;"	d
color	refRenderer.h	/^    float* color;$/;"	m	class:RefRenderer
image	refRenderer.h	/^    Image* image;$/;"	m	class:RefRenderer
numCircles	refRenderer.h	/^    int numCircles;$/;"	m	class:RefRenderer
position	refRenderer.h	/^    float* position;$/;"	m	class:RefRenderer
radius	refRenderer.h	/^    float* radius;$/;"	m	class:RefRenderer
sceneName	refRenderer.h	/^    SceneName sceneName;$/;"	m	class:RefRenderer
velocity	refRenderer.h	/^    float* velocity;$/;"	m	class:RefRenderer
changeCircles	sceneLoader.cpp	/^changeCircles($/;"	f	file:
generateRandomCircles	sceneLoader.cpp	/^generateRandomCircles($/;"	f	file:
generateSizeCircles	sceneLoader.cpp	/^generateSizeCircles($/;"	f	file:
loadCircleScene	sceneLoader.cpp	/^loadCircleScene($/;"	f
makeCircleGrid	sceneLoader.cpp	/^makeCircleGrid($/;"	f	file:
randomFloat	sceneLoader.cpp	/^randomFloat() {$/;"	f	file:
__SCENE_LOADER_H__	sceneLoader.h	/^#define __SCENE_LOADER_H__$/;"	d
CLAMP	util.h	/^#define CLAMP(/;"	d
__UTIL_H__	util.h	/^#define __UTIL_H__$/;"	d
